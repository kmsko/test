{"version":3,"sources":["components/Table.jsx","api/api.js","redux/table-reducer.js","App.js","reportWebVitals.js","redux/redux-store.js","index.js"],"names":["Table","props","useState","portionNumber","setPortionNumber","pagination","portionsStart","portionsEnd","portionCount","Math","ceil","users","length","portionSize","i","push","sort","key","setSettings","setSortUsers","slice","start","end","userP","setUserP","useEffect","pageCount","activeDesc","setActiveDesc","userDesc","setUserDesc","search","setSearch","className","disabled","onClick","map","e","setPageCount","setUsersPortion","type","onChange","currentTarget","value","filterS","filter","el","id","Number","u","descriptionActive","firstName","lastName","email","phone","description","address","streetAddress","city","state","zip","instance","axios","baseURL","UsersAPI","get","initialState","bigData","smallData","sortSettings","sortId","sortFirstName","sortLastName","sortEmail","sortPhone","addUser","setUsers","tableReducer","action","user","count","setting","usersSort","prev","next","valueALowerCase","valueBLowerCase","toLowerCase","match","join","connect","table","getUsersThunkCreator","dispatch","a","data","addUsers","setActiveModAdd","to","initialValues","onSubmit","values","setSubmitting","login","placeholder","name","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c39590f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nconst Table = (props) => {\r\n    // Пагинация \r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    let pagination = []\r\n    let portionPaginationSize = 5\r\n    let portionsStart = (portionNumber - 1) * portionPaginationSize + 1;\r\n    let portionsEnd = portionNumber * portionPaginationSize;\r\n    let portionCount = Math.ceil(props.users.length / props.portionSize)\r\n\r\n\r\n    for (let i = 1; i <= portionCount; i++) {\r\n        pagination.push(i)\r\n    }\r\n    // Сортировка по столбцам \r\n    let sort = (key) => {\r\n        props.setSettings(key)\r\n        props.setSortUsers(key)\r\n    }\r\n    // Список отрисовываемых строк\r\n    const [userP, setUserP] = useState([props.users.slice(props.start, props.end)])\r\n\r\n    let setUsersPortion = (e) => {\r\n        props.setPageCount(e)\r\n        setUserP(props.users.slice(props.start, props.end))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPortionNumber(1)\r\n    }, [props.users.length])\r\n\r\n    useEffect(() => {\r\n        setUserP(props.users.slice(props.start, props.end))\r\n    }, [props.pageCount, props.users])\r\n\r\n    const [activeDesc, setActiveDesc] = useState(false)\r\n    const [userDesc, setUserDesc] = useState({})\r\n\r\n    let descriptionActive = (u) => {\r\n        setActiveDesc(true)\r\n        setUserDesc(u)\r\n    }\r\n    const [search, setSearch] = useState('')\r\n\r\n\r\n    let setSearchValue = (e) => {\r\n        setSearch(e.currentTarget.value)\r\n    }\r\n    let filterSearch = () => {\r\n        let filterS = props.users.filter(el => el.id === Number(search))\r\n        setUserP(filterS)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return <div>\r\n\r\n        <div className=\"pagination\">\r\n\r\n            <button disabled={portionNumber <= 1} onClick={() => setPortionNumber(portionNumber - 1)}> prev </button>\r\n            {pagination.slice(portionsStart - 1, portionsEnd).map(e => <span\r\n                className={`${`button_pagination`} ${props.pageCount === e && 'button_pagination__active'}`}\r\n                onClick={() => setUsersPortion(e)}>\r\n                {e} </span>)}\r\n            <button disabled={portionsEnd >= pagination.length} onClick={() => setPortionNumber(portionNumber + 1)} >next</button>\r\n        </div>\r\n        <div>\r\n            search\r\n            <input type=\"search\" onChange={setSearchValue} value={search} />\r\n            <button onClick={filterSearch} >search</button>\r\n        </div>\r\n  \r\n        <table>\r\n\r\n            <thead>\r\n\r\n                <tr>\r\n                    <th className=\"button_id\" onClick={() => sort(`sortId`)}>id</th>\r\n                    <th className=\"button_id\" onClick={() => sort(`sortFirstName`)}>firstName</th>\r\n                    <th className=\"button_id\" onClick={() => sort(`sortLastName`)}>lastName</th>\r\n                    <th className=\"button_id\" onClick={() => sort(`sortEmail`)}>email</th>\r\n                    <th className=\"button_id\" onClick={() => sort(`sortPhone`)}>phone</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n\r\n\r\n\r\n                {userP.map(u => <tr onClick={() => descriptionActive(u)} >\r\n                    <th>{u.id}</th>\r\n                    <th>{u.firstName}</th>\r\n                    <th>{u.lastName}</th>\r\n                    <th>{u.email}</th>\r\n                    <th>{u.phone}</th>\r\n                </tr>\r\n                )}\r\n            </tbody>\r\n            {activeDesc && <tfoot>\r\n                <div>Выбран пользователь <b>{userDesc.firstName} {userDesc.lastName} </b></div>\r\n                <div>Описание: <textarea className=\"textarea_desc\" value={userDesc.description}></textarea></div>\r\n                <div>Адрес проживания: <b>{userDesc.address.streetAddress}</b></div>\r\n                <div>Город: <b>{userDesc.address.city}</b></div>\r\n                <div>Провинция/штат: <b>{userDesc.address.state}</b></div>\r\n                <div>Индекс: <b>{userDesc.address.zip}</b></div>\r\n            </tfoot>}\r\n\r\n        </table>\r\n    </div>\r\n}\r\nexport default Table","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: `http://www.filltext.com/`,\r\n})\r\n\r\nexport const UsersAPI = {\r\n    getUsers(value) {\r\n        return instance.get(value)\r\n    },\r\n   \r\n}\r\n","import { UsersAPI } from \"../api/api\";\r\n\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_SORT_USERS = 'SET_SORT_USERS';\r\nconst SET_SETTINGS = 'SET_SETTINGS';\r\nconst SET_PAGE_COUNT = 'SET_PAGE_COUNT';\r\nconst ADD_USERS = 'ADD_USERS';\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    bigData: '?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}',\r\n    smallData: '?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}',\r\n    sortSettings: {\r\n        sortId: false,\r\n        sortFirstName: false,\r\n        sortLastName: false,\r\n        sortEmail: false,\r\n        sortPhone: false,\r\n    },\r\n    start: 0,\r\n    end: 30,\r\n    pageCount: 1,\r\n    portionSize: 30,\r\n    addUser: {\r\n        address: {\r\n            city: \"\",\r\n            state: \"\",\r\n            streetAddress: \"\",\r\n            zip: \"\",\r\n        },\r\n        description: \"\",\r\n        email: \"\",\r\n        firstName: \"\",\r\n        id: null,\r\n        lastName: \"\",\r\n        phone: \"\"\r\n    }\r\n}\r\nconst tableReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case `'ADD_USERS'`:\r\n            return { ...state, addUser: action.user }\r\n        case `SET_PAGE_COUNT`:\r\n            return { ...state, pageCount: action.count, start: (action.count - 1) * state.portionSize, end: action.count * state.portionSize }\r\n        case `SET_USERS`:\r\n            return { ...state, users: action.users }\r\n        case `SET_SETTINGS`:\r\n            let setting = state.sortSettings\r\n            for (let key in setting) {\r\n                if (key === action.key) {\r\n                    setting[key] = !setting[key]\r\n                } else {\r\n                    setting[key] = false\r\n                }\r\n            }\r\n            return { ...state, sortSettings: setting }\r\n\r\n        case `SET_SORT_USERS`:\r\n            let usersSort = [...state.users.sort((prev, next) => {\r\n                let valueALowerCase;\r\n                let valueBLowerCase;\r\n                if (action.key === \"sortLastName\") {\r\n                    valueALowerCase = prev.lastName.toLowerCase();\r\n                    valueBLowerCase = next.lastName.toLowerCase();\r\n                } else if (action.key === \"sortFirstName\") {\r\n                    valueALowerCase = prev.firstName.toLowerCase();\r\n                    valueBLowerCase = next.firstName.toLowerCase();\r\n                } else if (action.key === \"sortEmail\") {\r\n                    valueALowerCase = prev.email.toLowerCase();\r\n                    valueBLowerCase = next.email.toLowerCase();\r\n                } else if (action.key === \"sortId\") {\r\n                    valueALowerCase = Number(prev.id)\r\n                    valueBLowerCase = Number(next.id)\r\n                } else if (action.key === \"sortPhone\") {\r\n                    valueALowerCase = Number(prev.phone.match(/\\d/g).join(''))\r\n                    valueBLowerCase = Number(next.phone.match(/\\d/g).join(''))\r\n                }\r\n\r\n                if (state.sortSettings[action.key]) {\r\n                    if (valueALowerCase < valueBLowerCase) {\r\n                        return -1;\r\n                    }\r\n                    else if (valueBLowerCase > valueALowerCase) {\r\n                        return 1;\r\n                    } else if (valueBLowerCase === valueALowerCase) { return 0 }\r\n                } else if (!state.sortSettings[action.key]) {\r\n                    if (valueALowerCase > valueBLowerCase) {\r\n                        return -1;\r\n                    }\r\n                    else if (valueBLowerCase < valueALowerCase) {\r\n                        return 1;\r\n                    } else if (valueBLowerCase === valueALowerCase) { return 0 }\r\n\r\n                }\r\n            })]\r\n            return { ...state, users: usersSort }\r\n        default: return state;\r\n    }\r\n}\r\n// action creator\r\nexport const setUsers = (users) => ({ type: SET_USERS, users });\r\nexport const setSettings = (key) => ({ type: SET_SETTINGS, key });\r\nexport const setSortUsers = (key) => ({ type: SET_SORT_USERS, key });\r\nexport const setPageCount = (count) => ({ type: SET_PAGE_COUNT, count });\r\nexport const addedUser = (user) => ({ type: ADD_USERS, user });\r\n\r\n// thunk creator\r\nexport const getUsersThunkCreator = (value) => async (dispatch) => {\r\n    let data = await UsersAPI.getUsers(value)\r\n    dispatch(setUsers(data.data));\r\n\r\n}\r\n\r\n\r\nexport default tableReducer;\r\n\r\n","import { Field, Form, Formik } from 'formik';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink, Route } from 'react-router-dom';\nimport './App.css';\nimport Table from './components/Table';\nimport { getUsersThunkCreator, setUsers, setSortUsers, setSettings, setPageCount, } from './redux/table-reducer'\n\n\n\nfunction App(props) {\n  const [addUsers, setActiveModAdd] = useState(false);\n\n  let activeModAddUsers = () => {\n    setActiveModAdd(!addUsers)\n  }\n\n\n  return (\n    <div className=\"container\">\n      <header>\n\n        <NavLink className=\"button\" onClick={() => props.getUsersThunkCreator(props.bigData)} to=\"/table\" >big data</NavLink>\n        <NavLink className=\"button\" onClick={() => props.getUsersThunkCreator(props.smallData)} to=\"/table\" >small data</NavLink>\n       \n        <div className=\"wrapperUserAdd\" >\n        <button onClick={activeModAddUsers}>Добавить Пользователя</button>\n\n          <Formik\n            initialValues={{\n              firstName: '',\n              lastName: '',\n              email: '',\n              phone: '',\n              address: {\n                description: '',\n                streetAddress: '',\n                city: '',\n                state: '',\n                zip: ''\n              }\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n              props.login()\n            }}\n          >\n            <Form className={addUsers ? `activeModUsersAdd` : `deActiveModUsersAdd`}>\n              <div>\n                firstName:  <Field placeholder=\"firstName\" type=\"text\" name=\"firstName\" />\n          lastName:  <Field placeholder=\"emlastNameail\" type=\"text\" name=\"emlastNameail\" />\n          email:  <Field placeholder=\"email\" type=\"email\" name=\"email\" />\n          phone:  <Field placeholder=\"phone\" type=\"tel\" name=\"phone\" />\n              </div>\n              <div>\n                Описание  <Field placeholder=\"description\" type=\"text\" name=\"description\" />\n          Адрес проживания:  <Field placeholder=\"streetAddress\" type=\"text\" name=\"streetAddress\" />\n          Город:  <Field placeholder=\"city\" type=\"text\" name=\"city\" />\n          Провинция/штат:  <Field placeholder=\"state\" type=\"text\" name=\"state\" />\n          Индекс:  <Field placeholder=\"zip\" type=\"zip\" name=\"zip\" />\n              </div>\n\n\n            </Form>\n          </Formik>\n        </div>\n        <div >\n\n\n\n        </div>\n\n\n      </header>\n\n      <Route path='/table' render={() => <Table\n        setSortUsers={props.setSortUsers}\n        sortSettings={props.sortSettings}\n        setSettings={props.setSettings}\n        setUsers={props.setUsers}\n        setPageCount={props.setPageCount}\n        pageCount={props.pageCount}\n        end={props.end}\n        portionSize={props.portionSize}\n        start={props.start}\n        users={props.users}\n      />} />\n\n    </div>\n  );\n}\n\n\n\nconst mapStateToProps = (state) => {\n  return {\n    users: state.table.users,\n    sortSettings: state.table.sortSettings,\n    bigData: state.table.bigData,\n    smallData: state.table.smallData,\n    start: state.table.start,\n    end: state.table.end,\n    pageCount: state.table.pageCount,\n    portionSize: state.table.portionSize,\n  }\n}\n\nexport default connect(mapStateToProps,\n  {\n    getUsersThunkCreator,\n    setUsers,\n    setSortUsers,\n    setSettings,\n    setPageCount,\n  })(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport tableReducer from \"./table-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    table: tableReducer\r\n})\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/redux-store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}